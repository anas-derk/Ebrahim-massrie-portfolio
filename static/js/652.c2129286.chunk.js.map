{"version":3,"file":"static/js/652.c2129286.chunk.js","mappings":"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","sources":["Pages/Terminal/index.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./index.min.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TerminalJsonData from \"./terminal_data.json\";\r\n\r\nconst Terminal = ({ pageTitle }) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const [isOpenTerminal, setIsOpenTerminal] = useState(false);\r\n\r\n    const [isTerminalOpening, setIsTerminalOpening] = useState(false);\r\n\r\n    const [command, setCommand] = useState(\"\");\r\n\r\n    const [results, setResults] = useState([]);\r\n\r\n    const [isTerminalHeaderVisible, setIsTerminalHeaderVisible] = useState(true);\r\n\r\n    const [previousCommandsList, setPreviousCommandsList] = useState([]);\r\n\r\n    const [commandIndex, setCommandIndex] = useState(0);\r\n    \r\n    let useStatementsAsTerminalCommandResults = TerminalJsonData.useStatementsAsTerminalCommandResults.map((useStatement) => `${useStatement.id}. ${useStatement.statement}`);\r\n\r\n    const addCommandToPreviousCommandList = () => {\r\n        if (!previousCommandsList.includes(command)) {\r\n            let previousCommandsListTemp = previousCommandsList.map(previousCommand => previousCommand);\r\n            previousCommandsListTemp.unshift(command);\r\n            setPreviousCommandsList(previousCommandsListTemp);\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => setCommand(e.target.value);\r\n\r\n    const openTerminal = () => {\r\n        if (!userName) {\r\n            setError(\"Error, Please Enter Your Name !!!\");\r\n            let errorTimeout = setTimeout(() => {\r\n                setError(\"\");\r\n                clearInterval(errorTimeout);\r\n            }, 3000);\r\n        }\r\n        else {\r\n            localStorage.setItem(\"user-name\", userName);\r\n            setIsTerminalOpening(true);\r\n            let openTerminalTimeout = setTimeout(() => {\r\n                setIsTerminalOpening(false);\r\n                setIsOpenTerminal(true);\r\n                clearTimeout(openTerminalTimeout);\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    const executeCommand = (e) => {\r\n        e.preventDefault();\r\n        // Clear The Command Text Box\r\n        setCommand(\"\");\r\n        // Handling Command Content Before Processing\r\n        const commandAfterHandling = command.trim().replace(/\\s{2,}/g, \" \").toLowerCase();\r\n        switch (commandAfterHandling) {\r\n            case \"\": {\r\n                setResults([\r\n                    \"Error, Please Write Any Valid Command !!\",\r\n                ]);\r\n                break;\r\n            }\r\n            case \"emt cls\": {\r\n                setIsTerminalHeaderVisible(false);\r\n                setResults([]);\r\n                setCommandIndex(0);\r\n                addCommandToPreviousCommandList();\r\n                break;\r\n            }\r\n            case \"emt who-am-i\": {\r\n                setResults([\r\n                    \"Hi, I'am Ebrahim Massrie |\",\r\n                    \"Junior Artificial Intelligence Engineer\",\r\n                    \"I am interested in the fields of data science,\",\r\n                    \"machine learning and deep learning,\",\r\n                    \"and I seek to build more modern applications in this field.\"\r\n                ]);\r\n                setCommandIndex(0);\r\n                addCommandToPreviousCommandList();\r\n                break;\r\n            }\r\n            case \"emt get --previous-commands\": {\r\n                if (previousCommandsList.length === 0) {\r\n                    setResults([\"Sorry, Can't Find Commands In Previous Command List !!!\"]);\r\n                } else {\r\n                    setResults(previousCommandsList);\r\n                }\r\n                setCommandIndex(0);\r\n                addCommandToPreviousCommandList();\r\n                break;\r\n            }\r\n            case \"emt clear --previous-commands-list\": {\r\n                if (previousCommandsList.length === 0) {\r\n                    setResults([\"Sorry, Can't Find Commands In Previous Command List !!!\"]);\r\n                } else {\r\n                    setPreviousCommandsList([]);\r\n                    setResults([\"Please Wait While Clear Previous Commands List ..\"]);\r\n                    setCommandIndex(0);\r\n                    setTimeout(() => {\r\n                        setResults([\"Ok!!, The Process is Successfuly .\"]);\r\n                    }, 2500);\r\n                }\r\n                break;\r\n            }\r\n            case \"emt close\": {\r\n                setResults([\"Please Wait While Closing Ebrahim Messrie Terminal The Back To Home Page ...\"]);\r\n                setCommandIndex(0);\r\n                setTimeout(() => {\r\n                    navigate(\"/\");\r\n                }, 3000);\r\n                break;\r\n            }\r\n            case \"emt restart\": {\r\n                setResults([\"Ebrahim Massrie Terminal Restart Now ..\"]);\r\n                setCommandIndex(0);\r\n                setTimeout(() => {\r\n                    document.location.reload();\r\n                }, 2000);\r\n                break;\r\n            }\r\n            case \"emt get --all-commands\": {\r\n                const allCommands = TerminalJsonData.allCommands.map((commandInfo) => commandInfo.command);\r\n                setResults(allCommands);\r\n                setCommandIndex(0);\r\n                addCommandToPreviousCommandList();\r\n                break;\r\n            }\r\n            case \"emt get --use-statements\": {\r\n                setResults(useStatementsAsTerminalCommandResults);\r\n                setCommandIndex(0);\r\n                addCommandToPreviousCommandList();\r\n                break;\r\n            }\r\n            default: {\r\n                // Convert Command To Array By Empty Space Separator\r\n                let commandPartsArray = commandAfterHandling.split(\" \");\r\n                // get Command Parts Array Length\r\n                let commandPartsArrayLength = commandPartsArray.length;\r\n                // check if previous array includes the next strings: emt, set, --user-name\r\n                // and check if array length greater than 4 to change user name\r\n                if (\r\n                    commandPartsArray.includes(\"emt\")\r\n                    && commandPartsArray.includes(\"set\")\r\n                    && commandPartsArray.includes(\"--user-name\")\r\n                    && commandPartsArrayLength >= 4\r\n                ) {\r\n                    // Get new user name In Array By Slicing Elements From The Fourth Element\r\n                    let namePartsArray = commandPartsArray.slice(3);\r\n                    // Execute Loop On Array For Replace Each (') Element With A Empty String \r\n                    namePartsArray.forEach((namePart, index) => {\r\n                        namePartsArray[index] = namePart.replaceAll(\"'\", \"\");\r\n                    });\r\n                    // Convert The Array To String Without Comma\r\n                    let newUserName = namePartsArray.join(\" \");\r\n                    // Start Handle Change User Name Process\r\n                    setResults([\"changing the username of the entered name ...\"]);\r\n                    setCommandIndex(0);\r\n                    localStorage.setItem(\"user-name\", newUserName);\r\n                    setTimeout(() => {\r\n                        setResults([\"The name has been changed successfully, and the terminal is restarting ..\"]);\r\n                        setTimeout(() => {\r\n                            document.location.reload();\r\n                        }, 1500);\r\n                    }, 2500);\r\n                } else {\r\n                    setResults([\r\n                        \"Error, The Command Is Not Found !!\",\r\n                        \"Please Write Any Command Valid .\"\r\n                    ]);\r\n                    setCommandIndex(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleKeyboardPressing = (key) => {\r\n\r\n        let previousCommandsListLength = previousCommandsList.length;\r\n\r\n        if (key === \"ArrowUp\") {\r\n\r\n            if (previousCommandsListLength > 0 && commandIndex < previousCommandsListLength) {\r\n\r\n                setCommand(previousCommandsList[commandIndex]);\r\n\r\n                setCommandIndex(commandIndex + 1);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    document.addEventListener(\"keyup\", (e) => handleKeyboardPressing(e.key));\r\n\r\n    useEffect(() => {\r\n\r\n        document.title = pageTitle;\r\n\r\n        const user_name = localStorage.getItem(\"user-name\");\r\n\r\n        if (user_name) {\r\n\r\n            setIsTerminalOpening(true);\r\n\r\n            setUserName(user_name);\r\n\r\n            let terminalOpeningTimeout = setTimeout(() => {\r\n\r\n                setIsTerminalOpening(false);\r\n\r\n                setIsOpenTerminal(true);\r\n\r\n                clearTimeout(terminalOpeningTimeout);\r\n\r\n            }, 2000);\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        // Start Terminal\r\n        <div className=\"terminal pt-5 pb-5\">\r\n            <h2 className=\"mb-4 text-center bg-success p-3\">Welcome To You In Eng. Ebrahim Massrie Terminal .</h2>\r\n            {!isOpenTerminal && !isTerminalOpening &&\r\n                <table className=\"how-to-use-terminal-table w-100 mb-4\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"bg-secondary p-2 use-statments ps-3\">use statements:</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {TerminalJsonData.useStatments.map((useStatement) =>\r\n                            <tr key={useStatement.id}>\r\n                                <td>\r\n                                    {useStatement.id}. &nbsp;\r\n                                    {useStatement.statement}\r\n                                    {useStatement.command &&\r\n                                        <span className=\"bg-secondary p-2 m-2 d-block\">{useStatement.command}</span>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            {!isOpenTerminal && !isTerminalOpening && <h6 className=\"mb-3\">Please Enter Your Name Then Click Open Terminal :</h6>\r\n                && <div className=\"row mb-4\">\r\n                    <div className=\"col-md-8\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Your Name Here\"\r\n                            className=\"form-control p-3 user-name-input\"\r\n                            onChange={(e) => setUserName(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <button className=\"btn btn-success p-3 open-terminal-btn\" onClick={openTerminal}>Open Terminal</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {isOpenTerminal &&\r\n                <h6 className=\"welcome-message mb-4\">Hi <span className=\"user-name fw-bold bg-success p-2 me-2 ms-2\">{userName}</span> , The Terminal Is Running .</h6> &&\r\n                <h6 className=\"use-statments mb-4\">If You Can't Remember The Commands, Please Write The Next Command: <span className=\"get-use-statement bg-secondary p-2 m-2 d-block\">emt get --use-statements</span></h6>\r\n            }\r\n            {error && <p className=\"alert alert-danger\">{error}</p>}\r\n            {isTerminalOpening && <div className=\"d-flex align-items-center bg-secondary p-3 loading-box\">\r\n                <strong>Loading...</strong>\r\n                <div className=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n            </div>}\r\n            {isOpenTerminal && <div className=\"terminal-control-box p-4\">\r\n                {isTerminalHeaderVisible && <header className=\"header-terminal mb-4\">\r\n                    <h6 className=\"terminal-name\">Ebrahim Massrie Terminal</h6>\r\n                    <h6 className=\"copyright\">Copyright &copy; Ebrahim Massrie. All rights reserved.</h6>\r\n                </header>}\r\n                {/* Start Grid System */}\r\n                {/* Start Terminal Body */}\r\n                <div className=\"terminal-body\">\r\n                    {/* Start Terminal Control Form */}\r\n                    <form className=\"terminal-control-form mb-3\" onSubmit={executeCommand}>\r\n                        <span className=\"bg-success p-2\">{userName}@EbrahimMessrie-terminal: </span>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"command-input ps-2\"\r\n                            autoFocus\r\n                            onChange={handleChange}\r\n                            value={command}\r\n                        />\r\n                    </form>\r\n                    {/* End Terminal Control Form */}\r\n                </div>\r\n                {/* End Terminal Body */}\r\n                {/* Start Result Box */}\r\n                {results && <div className=\"result-box\">\r\n                    <ul className=\"result-list\">\r\n                        {results.map((result, index) =>\r\n                            <li className=\"result mb-3\" key={index}>{result}</li>\r\n                        )}\r\n                    </ul>\r\n                </div>}\r\n                {/* End Result Box */}\r\n            </div>}\r\n        </div>\r\n        // End Terminal\r\n    );\r\n}\r\n\r\nexport default Terminal;"],"names":["pageTitle","navigate","useNavigate","useState","userName","setUserName","error","setError","isOpenTerminal","setIsOpenTerminal","isTerminalOpening","setIsTerminalOpening","command","setCommand","results","setResults","isTerminalHeaderVisible","setIsTerminalHeaderVisible","previousCommandsList","setPreviousCommandsList","commandIndex","setCommandIndex","useStatementsAsTerminalCommandResults","TerminalJsonData","useStatement","id","statement","addCommandToPreviousCommandList","includes","previousCommandsListTemp","map","previousCommand","unshift","document","addEventListener","e","key","previousCommandsListLength","length","handleKeyboardPressing","useEffect","title","user_name","localStorage","getItem","terminalOpeningTimeout","setTimeout","clearTimeout","className","type","placeholder","onChange","target","value","onClick","setItem","openTerminalTimeout","errorTimeout","clearInterval","role","onSubmit","preventDefault","commandAfterHandling","trim","replace","toLowerCase","location","reload","allCommands","commandInfo","commandPartsArray","split","commandPartsArrayLength","namePartsArray","slice","forEach","namePart","index","replaceAll","newUserName","join","autoFocus","result"],"sourceRoot":""}